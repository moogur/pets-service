name: Deploy

on:
  push:
    tags:
      - v*.*.*

jobs:
  set-node-version:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Set node version'
        id: set-matrix
        run: |
          node_version=$(jq '.engines.node' package.json)
          echo "::set-output name=matrix::{\"node_version\":[${node_version:1:-1}]}"

  build-docker-job:
    needs: set-node-version
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.set-node-version.outputs.matrix)}}

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3

      - name: 'Global env'
        id: global_env
        run: |
          echo "::set-output name=IMAGE_NAME::${GITHUB_REPOSITORY#*/}"
          echo "::set-output name=DOCKERHUB_IMAGE_NAME::docker.pkg.github.com/${GITHUB_REPOSITORY}/${GITHUB_REPOSITORY#*/}"

      - name: 'Version'
        id: version
        run: |
          tag=${GITHUB_REF/refs\/tags\//}
          version=${tag#v}
          echo "::set-output name=VERSION::${version}"

      - name: 'Build and tag image'
        run: |
          docker build --build-arg ARG_NODE_VERSION="${{ matrix.node_version }}" --build-arg ARG_APP_VERSION="${{ steps.version.outputs.VERSION }}" -t "${{ steps.global_env.outputs.DOCKERHUB_IMAGE_NAME }}:latest" -t "${{ steps.global_env.outputs.DOCKERHUB_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}" .

      - name: 'docker login'
        run: docker login docker.pkg.github.com -u $GITHUB_ACTOR -p ${{secrets.GITHUB_TOKEN}}

      - name: 'Publish image'
        env:
          IMAGE_NAME: $GITHUB_REPOSITORY
        run: docker push --all-tags "docker.pkg.github.com/$GITHUB_REPOSITORY/${{ steps.global_env.outputs.IMAGE_NAME }}"
